(provide 'floor)
(provide 'isLegalTile)
(provide 'getTile)

(define floor
	( vector 
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '0 '0 '0 '-)
		(vector '- '- '- '- 'g 'g 'v 'g 'g 'g 'g 'g 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '0 '0 '0 '-)
		(vector '- '- '- '- '- '1 '1 '1 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'v '- '-)
		(vector '- '- '- '- '- '1 '1 '1 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '1 '1 '1 '> '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '-)
		(vector 'b 'b 'b '- '- '- '- '- 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '-)
		(vector 'r 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g '- '-)
		(vector 'r 'g 'g 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '- '- '- '- 'g '- '- 'g '- '-)
		(vector 'r 'g 'g 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '- '- '- '- 'g '- '- 'g '- '-)
		(vector 'r 'g 'g 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '> '2 '2 '2 '2 '2 '> '- '- 'g '- '-)
		(vector 'r 'g 'g 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '- '- '- '- 'g '- '- 'g '- '-)
		(vector 'r 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g 'g '- '-)
		(vector 'r 'g 'g 'g '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '- '- '- '- '- '- 'g '- '-)
		(vector 'b 'b 'b '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '3 '3 '3 '< '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '3 '3 '3 'g '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '3 '3 '3 'g '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '3 '3 '3 'g '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '3 '3 '3 '> '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'g '- '- '- '- '- '- '- 'g '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- 'v '- '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '4 '4 '4 '-)
		(vector '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '- '4 '4 '4 '-)
))

(define getTile
  (lambda (x y grid)
    (vector-ref (vector-ref grid y) x)))

(define isLegalTile
  (lambda (x y grid)
    (cond 
      [(equal? (getTile x y grid) '-) #f]
      [(equal? (getTile x y grid) 'b) #f]
      [(equal? (getTile x y grid) '0) #f]
	  [(equal? (getTile x y grid) '1) #f]
	  [(equal? (getTile x y grid) '2) #f]
	  [(equal? (getTile x y grid) '3) #f]
	  [(equal? (getTile x y grid) '4) #f]
      [else #t]
    )))
